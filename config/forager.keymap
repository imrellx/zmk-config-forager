#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define MEH LS(LC(LALT))

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <250>;

            // quick_tap_ms = <0>;

            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        sabk: shift_to_alt_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LA(BSPC)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sym_bspc: left_thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&sabk>;
        };

        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hr: homerow_mods_ring_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RING_FINGER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
        };

        hp: homerow_mods_pinky_finger {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_PINKY_FINGER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            require-prior-idle-ms = <0>;
            flavor = "tap-preferred";
        };

        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <160>;
            flavor = "tap-preferred";
        };

        lh: layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HOLD";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <160>;
            flavor = "tap-preferred";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <200>;
        };

        boot-left {
            bindings = <&bootloader>;
            key-positions = <14 4>;
            timeout-ms = <200>;
            layers = <2>;
        };

        boot-right {
            bindings = <&bootloader>;
            key-positions = <5 15>;
            timeout-ms = <200>;
            layers = <2>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
            timeout-ms = <200>;
            layers = <0>;
        };

        esc-2 {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            timeout-ms = <200>;
            layers = <0>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <13 16>;
            timeout-ms = <50>;
            layers = <0>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <20 21>;
            timeout-ms = <100>;
            layers = <0>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <20 22>;
            timeout-ms = <100>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 21>;
            timeout-ms = <100>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <22 23>;
            timeout-ms = <100>;
            layers = <0>;
        };

        select-all {
            bindings = <&kp LG(A)>;
            key-positions = <23 20>;
            timeout-ms = <100>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp Q           &kp W           &kp E               &kp R             &kp T          &kp Y      &kp U              &kp I                &kp O            &kp P
  &hp LEFT_GUI A  &hr LEFT_ALT S  &hm LEFT_CONTROL D  &hm LEFT_SHIFT F  &kp G          &kp H      &hm RIGHT_SHIFT J  &hm RIGHT_CONTROL K  &hp RIGHT_ALT L  &hp RIGHT_GUI SEMICOLON
  &kp Z           &kp X           &kp C               &kp V             &kp B          &kp N      &kp M              &kp COMMA            &kp DOT          &kp FSLH
                                                      &lt 1 BACKSPACE   &lt 2 ENTER    &lt 2 TAB  &lt 1 SPACE
            >;
        };

        num {
            bindings = <
  &kp EXCL     &kp AT_SIGN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH    &kp PLUS   &kp N7  &kp N8  &kp N9  &kp ASTRK
  &kp HASH     &kp DOLLAR   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE        &kp MINUS  &kp N4  &kp N5  &kp N6  &kp N0
  &kp PERCENT  &kp CARET    &kp LBKT              &kp RBKT               &kp DEL          &kp EQUAL  &kp N1  &kp N2  &kp N3  &kp SINGLE_QUOTE
                                                  &trans                 &trans           &trans     &trans
            >;
        };

        nav {
            bindings = <
  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans          &kp PAGE_DOWN   &kp PAGE_UP   &kp DEL    &trans
  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &kp APOSTROPHE
  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans          &kp END         &kp HOME      &kp INS    &trans
                            &trans   &trans    &trans          &trans
            >;
        };

        adj {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL    &kp C_SLEEP  &trans  &trans  &kp C_BRI_DN  &kp C_BRI_UP
  &trans        &trans        &trans        &trans        &trans            &trans       &trans  &trans  &kp C_VOL_DN  &kp C_VOL_UP
  &bootloader   &trans        &trans        &trans        &trans            &trans       &trans  &trans  &trans        &bootloader
                                            &trans        &trans            &trans       &trans
            >;
        };
    };
};

&lt {
    // require-prior-idle-ms = <100>;

    tapping-term-ms = <150>;
    quick-tap-ms = <200>;
};

&mt { quick-tap-ms = <200>; };

&sk {
    release-after-ms = <500>;
    quick-release;
};
